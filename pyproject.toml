[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "api-monitoring"
version = "2.0.0"
description = "A modern, asynchronous tool for monitoring AWS-compatible APIs and sending alerts when issues are detected."
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "API Monitoring Contributors", email = "dkamenkov@example.com"}
]
maintainers = [
    {name = "Dmitry Kamenkov", email = "dkamenkov@example.com"}
]
keywords = ["api", "monitoring", "aws", "telegram", "alerts", "asyncio", "aiohttp"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking :: Monitoring",
    "Framework :: AsyncIO",
]
requires-python = ">=3.11"
dependencies = [
    "aiobotocore>=2.9.0",
    "aiohttp>=3.9.3",
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "coverage>=7.2.0",
]

[project.urls]
Homepage = "https://github.com/dkamenkov/api-monitoring"
Repository = "https://github.com/dkamenkov/api-monitoring.git"
Issues = "https://github.com/dkamenkov/api-monitoring/issues"
Changelog = "https://github.com/dkamenkov/api-monitoring/blob/main/CHANGELOG.md"
Documentation = "https://github.com/dkamenkov/api-monitoring#readme"

[project.scripts]
api-monitoring = "api_monitoring.main:main"

[tool.setuptools.packages.find]
include = ["api_monitoring*"]

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["api_monitoring"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["api_monitoring"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]