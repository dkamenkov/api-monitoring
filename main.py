import boto3
import botocore
from dotenv import load_dotenv
import os
import subprocess
import logging
import requests
from datetime import datetime
import concurrent.futures


load_dotenv()
mtr_url = os.getenv('ENDPOINT_URL')
endpoint_url = "https://" + mtr_url
logging.basicConfig(filename='logs.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

def get_external_ip():
    try:
        response = requests.get("https://httpbin.org/ip", timeout=5)  # –¥–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç
        ip = response.json()["origin"]
        return ip
    except Exception as e:
        logging.error(f"Error getting external IP: {str(e)}")
        return "Unknown IP"


def is_maintanace():
    ''''''

def telegram_sender(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, data=payload, timeout=5)  # –¥–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç
        if response.status_code != 200:
            logging.error(f"Failed to send message to Telegram: {response.content}")
    except Exception as e:
        logging.error(f"An error occurred when trying to send message to Telegram: {str(e)}")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...


def send_alert(mtr_url, mtr_output, error_message=None):
    logging.info("Sending alert...")  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞

    source_ip = get_external_ip()  # —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    alert_message = f"""
<b>üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é API {mtr_url} üö®</b>
<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b> {now}
<b>–ê–¥—Ä–µ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API:</b> {source_ip}
<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç:</b> <a href='[–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –∑–¥–µ—Å—å]'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É</a>
<b>–û—à–∏–±–∫–∞:</b> {error_message}
<b>–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–æ {mtr_url}:</b>
<pre>
{mtr_output}
</pre>
"""
    telegram_sender(alert_message)

'''
    client = boto3.client(
        'ec2',
        aws_access_key_id = os.getenv('AWS_ACCESS_KEY_ID'),
        aws_secret_access_key = os.getenv('AWS_SECRET_ACCESS_KEY'),
        endpoint_url = endpoint_url,
    )
'''
def check_api():
    session = boto3.Session(
        aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
        aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY'),
    )
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏
    config = botocore.config.Config(
        connect_timeout=5,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        read_timeout=10,    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —á—Ç–µ–Ω–∏—è
    )
    
    client = session.client(
        'ec2',
        endpoint_url=endpoint_url,
        config=config,
    )
    error = None
    try:
        logging.info("Calling describe_availability_zones()...")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        response = client.describe_availability_zones()
        logging.info("describe_availability_zones() call completed.")
        return True, None
    except botocore.exceptions.EndpointConnectionError as e:
        logging.error(f"Cannot connect to the endpoint: {str(e)}")
        error = f"Cannot connect to the endpoint: {str(e)}"
    except botocore.exceptions.PartialCredentialsError as e:
        logging.error(f"Incomplete credentials provided: {str(e)}")
        error = f"Incomplete credentials provided: {str(e)}"
    except botocore.exceptions.SSLError as e:
        logging.error(f"SSL/TLS error occurred: {str(e)}")
        error = f"SSL/TLS error occurred: {str(e)}"
    except botocore.exceptions.ClientError as e:
        error_code = e.response['Error']['Code']
        error_message = e.response['Error']['Message']
        logging.error(f"ClientError occurred: {error_code} - {error_message}")
        error = f"ClientError occurred: {error_code} - {error_message}"
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")
        error = f"An unexpected error occurred: {str(e)}"
    
    return False, error


def run_mtr(target):
    try:
        result = subprocess.run(["mtr", "--report", "--report-cycles", "1", "-4", "--no-dns", target],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True,
                                check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        logging.error(f"An error occurred: {str(e)}")
        logging.error(f"stderr: {e.stderr}")
        return None

def main():
    logging.info("Starting main...")
    with concurrent.futures.ThreadPoolExecutor() as executor:
        future = executor.submit(check_api)
        try:
            success, error_message = future.result(timeout=15)
            if not success and error_message:
                logging.info("API check failed.") 
                mtr_output = run_mtr(mtr_url)
                if mtr_output:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –Ω–µ None
                    send_alert(mtr_url, mtr_output, error_message)
                else:
                    logging.error("Failed to get MTR trace.")
        except concurrent.futures.TimeoutError:
            logging.error("API check timed out")
            mtr_output = run_mtr(mtr_url)
            if mtr_output:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –Ω–µ None
                send_alert(mtr_url, mtr_output, "API check timed out")
            else:
                logging.error("Failed to get MTR trace.")


if __name__ == "__main__":
    main()
